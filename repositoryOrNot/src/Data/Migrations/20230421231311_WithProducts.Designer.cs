// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepoOrNot.Data;

#nullable disable

namespace RepoOrNot.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20230421231311_WithProducts")]
    partial class WithProducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RepoOrNot.Data.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "Acme Shipping",
                            ContactName = "Bob Smith",
                            Phone = "404-555-2020"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "Pete's Coffee",
                            ContactName = "Pete Johnson",
                            Phone = "203-456-0098"
                        });
                });

            modelBuilder.Entity("RepoOrNot.Data.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Terms")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            DueDate = new DateTime(2023, 5, 21, 23, 13, 11, 255, DateTimeKind.Utc).AddTicks(2228),
                            OrderDate = new DateTime(2023, 4, 21, 23, 13, 11, 255, DateTimeKind.Utc).AddTicks(2228),
                            OrderNumber = "1000",
                            Terms = "Net 30"
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 1,
                            DueDate = new DateTime(2023, 5, 21, 23, 13, 11, 255, DateTimeKind.Utc).AddTicks(2236),
                            OrderDate = new DateTime(2023, 4, 21, 23, 13, 11, 255, DateTimeKind.Utc).AddTicks(2235),
                            OrderNumber = "1001",
                            Terms = "Net 90"
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 2,
                            DueDate = new DateTime(2023, 5, 21, 23, 13, 11, 255, DateTimeKind.Utc).AddTicks(2237),
                            OrderDate = new DateTime(2023, 4, 21, 23, 13, 11, 255, DateTimeKind.Utc).AddTicks(2237),
                            OrderNumber = "1002",
                            Terms = "Net 15"
                        });
                });

            modelBuilder.Entity("RepoOrNot.Data.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Discount = 0.0,
                            OrderId = 1,
                            ProductName = "Labels",
                            Quantity = 24.0,
                            UnitPrice = 14.99
                        },
                        new
                        {
                            Id = 2,
                            Discount = 0.25,
                            OrderId = 1,
                            ProductName = "Boxes",
                            Quantity = 144.0,
                            UnitPrice = 3.9900000000000002
                        },
                        new
                        {
                            Id = 3,
                            Discount = 0.0,
                            OrderId = 1,
                            ProductName = "Receipt Paper",
                            Quantity = 4.0,
                            UnitPrice = 19.989999999999998
                        },
                        new
                        {
                            Id = 4,
                            Discount = 0.050000000000000003,
                            OrderId = 2,
                            ProductName = "Printer Ink",
                            Quantity = 4.0,
                            UnitPrice = 114.98
                        },
                        new
                        {
                            Id = 5,
                            Discount = 0.050000000000000003,
                            OrderId = 2,
                            ProductName = "Boxes",
                            Quantity = 24.0,
                            UnitPrice = 3.9900000000000002
                        },
                        new
                        {
                            Id = 6,
                            Discount = 0.0,
                            OrderId = 3,
                            ProductName = "Pens",
                            Quantity = 12.0,
                            UnitPrice = 4.9800000000000004
                        },
                        new
                        {
                            Id = 7,
                            Discount = 0.10000000000000001,
                            OrderId = 3,
                            ProductName = "Pencils",
                            Quantity = 12.0,
                            UnitPrice = 1.99
                        });
                });

            modelBuilder.Entity("RepoOrNot.Data.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductName = "Envelopes",
                            Unit = "Box",
                            UnitPrice = 4.99m
                        },
                        new
                        {
                            Id = 2,
                            ProductName = "Binders",
                            Unit = "Each",
                            UnitPrice = 3.99m
                        });
                });

            modelBuilder.Entity("RepoOrNot.Data.Entities.Order", b =>
                {
                    b.HasOne("RepoOrNot.Data.Entities.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RepoOrNot.Data.Entities.OrderItem", b =>
                {
                    b.HasOne("RepoOrNot.Data.Entities.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RepoOrNot.Data.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RepoOrNot.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
